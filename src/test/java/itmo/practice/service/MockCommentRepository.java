package itmo.practice.service;

import itmo.practice.domain.Comment;
import itmo.practice.domain.Post;
import itmo.practice.repository.CommentRepository;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class MockCommentRepository implements CommentRepository {
    public List<Comment> findAllByPostOrderByIdDesc(Post post) {
        return post.getComments()
                .stream()
                .sorted(Comparator.comparingLong(Comment::getId).reversed())
                .collect(Collectors.toList());
    }

    // =================  Autogenerated  =====================

    public List<Comment> findAll() {
        return null;
    }

    public List<Comment> findAll(Sort sort) {
        return null;
    }

    public Page<Comment> findAll(Pageable pageable) {
        return null;
    }

    public List<Comment> findAllById(Iterable<Long> iterable) {
        return null;
    }

    public long count() {
        return 0;
    }

    public void deleteById(Long aLong) {

    }

    public void delete(Comment comment) {

    }

    public void deleteAll(Iterable<? extends Comment> iterable) {

    }

    public void deleteAll() {

    }

    public <S extends Comment> S save(S s) {
        return null;
    }

    public <S extends Comment> List<S> saveAll(Iterable<S> iterable) {
        return null;
    }

    public Optional<Comment> findById(Long aLong) {
        return Optional.empty();
    }

    public boolean existsById(Long aLong) {
        return false;
    }

    public void flush() {

    }

    public <S extends Comment> S saveAndFlush(S s) {
        return null;
    }

    public void deleteInBatch(Iterable<Comment> iterable) {

    }

    public void deleteAllInBatch() {

    }

    public Comment getOne(Long aLong) {
        return null;
    }

    public <S extends Comment> Optional<S> findOne(Example<S> example) {
        return Optional.empty();
    }

    public <S extends Comment> List<S> findAll(Example<S> example) {
        return null;
    }

    public <S extends Comment> List<S> findAll(Example<S> example, Sort sort) {
        return null;
    }

    public <S extends Comment> Page<S> findAll(Example<S> example, Pageable pageable) {
        return null;
    }

    public <S extends Comment> long count(Example<S> example) {
        return 0;
    }

    public <S extends Comment> boolean exists(Example<S> example) {
        return false;
    }
}
