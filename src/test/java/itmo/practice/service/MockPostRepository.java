package itmo.practice.service;

import itmo.practice.FixedTickedClock;
import itmo.practice.domain.Post;
import itmo.practice.repository.PostRepository;
import lombok.Getter;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import java.sql.Date;
import java.time.Instant;
import java.util.*;
import java.util.stream.Collectors;

public class MockPostRepository implements PostRepository {
    private long idCounter = 0;
    private final FixedTickedClock clock = new FixedTickedClock(Instant.now());

    @Getter
    private final Set<Post> posts = new HashSet<>();

    public <S extends Post> S save(S s) {
        if (!posts.contains(s)) {
            s.setId(idCounter++);
            s.setCreationTime(Date.from(clock.instant()));
            clock.plusSeconds(1);
            s.setComments(new ArrayList<>());
            posts.add(s);
        }
        return s;
    }

    public List<Post> findAllByOrderByCreationTimeDesc() {
        return posts.stream()
                .sorted(Comparator.comparing(Post::getCreationTime, java.util.Date::compareTo).reversed())
                .collect(Collectors.toList());
    }

    public Optional<Post> findById(Long id) {
        return posts.stream().filter(p -> p.getId() == id).findFirst();
    }

    public void deleteAll() {
        posts.clear();
    }

    // =================  Autogenerated  =====================

    public List<Post> findAll() {
        return null;
    }

    public List<Post> findAll(Sort sort) {
        return null;
    }

    public Page<Post> findAll(Pageable pageable) {
        return null;
    }

    public List<Post> findAllById(Iterable<Long> iterable) {
        return null;
    }

    public long count() {
        return 0;
    }

    public void deleteById(Long aLong) {

    }

    public void delete(Post post) {

    }

    public void deleteAll(Iterable<? extends Post> iterable) {

    }

    public <S extends Post> List<S> saveAll(Iterable<S> iterable) {
        return null;
    }

    public boolean existsById(Long aLong) {
        return false;
    }

    public void flush() {

    }

    public <S extends Post> S saveAndFlush(S s) {
        return null;
    }

    public void deleteInBatch(Iterable<Post> iterable) {

    }

    public void deleteAllInBatch() {

    }

    public Post getOne(Long aLong) {
        return null;
    }

    public <S extends Post> Optional<S> findOne(Example<S> example) {
        return Optional.empty();
    }

    public <S extends Post> List<S> findAll(Example<S> example) {
        return null;
    }

    public <S extends Post> List<S> findAll(Example<S> example, Sort sort) {
        return null;
    }

    public <S extends Post> Page<S> findAll(Example<S> example, Pageable pageable) {
        return null;
    }

    public <S extends Post> long count(Example<S> example) {
        return 0;
    }

    public <S extends Post> boolean exists(Example<S> example) {
        return false;
    }
}
