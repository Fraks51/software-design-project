package itmo.practice.service;

import itmo.practice.FixedTickedClock;
import itmo.practice.domain.Chat;
import itmo.practice.repository.ChatRepository;
import lombok.Getter;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import java.sql.Date;
import java.time.Instant;
import java.util.*;
import java.util.stream.Collectors;

public class MockChatRepository implements ChatRepository {
    private long idCounter = 0;
    private final FixedTickedClock clock = new FixedTickedClock(Instant.now());

    @Getter
    private final Set<Chat> chats = new HashSet<>();

    public <S extends Chat> S save(S s) {
        if (!chats.contains(s)) {
            s.setId(idCounter++);
            s.setCreationTime(Date.from(clock.instant()));
            clock.plusSeconds(1);
            s.setMessages(new ArrayList<>());
            chats.add(s);
        }
        return s;
    }

    public List<Chat> findAllByOrderByCreationTimeDesc() {
        return chats.stream()
                .sorted(Comparator.comparing(Chat::getCreationTime, java.util.Date::compareTo).reversed())
                .collect(Collectors.toList());
    }

    public Optional<Chat> findById(Long id) {
        return chats.stream().filter(p -> p.getId() == id).findFirst();
    }

    public void deleteAll() {
        chats.clear();
    }

    // =================  Autogenerated  =====================

    public List<Chat> findAll() {
        return null;
    }

    public List<Chat> findAll(Sort sort) {
        return null;
    }

    public Page<Chat> findAll(Pageable pageable) {
        return null;
    }

    public List<Chat> findAllById(Iterable<Long> iterable) {
        return null;
    }

    public long count() {
        return 0;
    }

    public void deleteById(Long aLong) {

    }

    public void delete(Chat chat) {

    }

    public void deleteAll(Iterable<? extends Chat> iterable) {

    }

    public <S extends Chat> List<S> saveAll(Iterable<S> iterable) {
        return null;
    }

    public boolean existsById(Long aLong) {
        return false;
    }

    public void flush() {

    }

    public <S extends Chat> S saveAndFlush(S s) {
        return null;
    }

    public void deleteInBatch(Iterable<Chat> iterable) {

    }

    public void deleteAllInBatch() {

    }

    public Chat getOne(Long aLong) {
        return null;
    }

    public <S extends Chat> Optional<S> findOne(Example<S> example) {
        return Optional.empty();
    }

    public <S extends Chat> List<S> findAll(Example<S> example) {
        return null;
    }

    public <S extends Chat> List<S> findAll(Example<S> example, Sort sort) {
        return null;
    }

    public <S extends Chat> Page<S> findAll(Example<S> example, Pageable pageable) {
        return null;
    }

    public <S extends Chat> long count(Example<S> example) {
        return 0;
    }

    public <S extends Chat> boolean exists(Example<S> example) {
        return false;
    }
}
