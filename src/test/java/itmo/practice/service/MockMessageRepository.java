package itmo.practice.service;

import itmo.practice.domain.Message;
import itmo.practice.domain.Chat;
import itmo.practice.repository.MessageRepository;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class MockMessageRepository implements MessageRepository {
    public List<Message> findAllByChatOrderByIdDesc(Chat chat) {
        return chat.getMessages()
                .stream()
                .sorted(Comparator.comparingLong(Message::getId).reversed())
                .collect(Collectors.toList());
    }

    // =================  Autogenerated  =====================

    public List<Message> findAll() {
        return null;
    }

    public List<Message> findAll(Sort sort) {
        return null;
    }

    public Page<Message> findAll(Pageable pageable) {
        return null;
    }

    public List<Message> findAllById(Iterable<Long> iterable) {
        return null;
    }

    public long count() {
        return 0;
    }

    public void deleteById(Long aLong) {

    }

    public void delete(Message message) {

    }

    public void deleteAll(Iterable<? extends Message> iterable) {

    }

    public void deleteAll() {

    }

    public <S extends Message> S save(S s) {
        return null;
    }

    public <S extends Message> List<S> saveAll(Iterable<S> iterable) {
        return null;
    }

    public Optional<Message> findById(Long aLong) {
        return Optional.empty();
    }

    public boolean existsById(Long aLong) {
        return false;
    }

    public void flush() {

    }

    public <S extends Message> S saveAndFlush(S s) {
        return null;
    }

    public void deleteInBatch(Iterable<Message> iterable) {

    }

    public void deleteAllInBatch() {

    }

    public Message getOne(Long aLong) {
        return null;
    }

    public <S extends Message> Optional<S> findOne(Example<S> example) {
        return Optional.empty();
    }

    public <S extends Message> List<S> findAll(Example<S> example) {
        return null;
    }

    public <S extends Message> List<S> findAll(Example<S> example, Sort sort) {
        return null;
    }

    public <S extends Message> Page<S> findAll(Example<S> example, Pageable pageable) {
        return null;
    }

    public <S extends Message> long count(Example<S> example) {
        return 0;
    }

    public <S extends Message> boolean exists(Example<S> example) {
        return false;
    }
}
