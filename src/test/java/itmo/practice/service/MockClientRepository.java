package itmo.practice.service;

import itmo.practice.domain.Client;
import itmo.practice.repository.ClientRepository;
import lombok.Getter;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import java.time.Instant;
import java.util.*;
import java.util.stream.Collectors;

public class MockClientRepository implements ClientRepository {
    private long idCounter = 0;

    @Getter
    private final Set<Client> clients = new HashSet<>();

    public <S extends Client> S save(S s) {
        if (!clients.contains(s)) {
            s.setId(idCounter++);
            s.setCreationTime(Date.from(Instant.now()));
            s.setPosts(new ArrayList<>());
            s.setFriends(new HashSet<>());
            clients.add(s);
        }
        return s;
    }

    public void updatePasswordSha(long id, String login, String password) {
        clients.stream().filter(c -> c.getId() == id).forEach(c -> c.setPassword_sha(login + password));
    }

    public int countByLogin(String login) {
        return (int) clients.stream().filter(c -> Objects.equals(login, c.getLogin())).count();
    }

    public Client findByLoginAndPassword(String login, String password) {
        return clients.stream().filter(c -> Objects.equals(login + password, c.getPassword_sha())).findFirst().orElse(null);
    }

    public Client findByLogin(String login) {
        return clients.stream().filter(c -> Objects.equals(login, c.getLogin())).findFirst().orElse(null);
    }

    public long findFriends(long id1, long id2) {
        Client client1 = findById(id1).orElse(null);
        Client client2 = findById(id2).orElse(null);
        if (client1 == null || client2 == null) {
            return 0;
        } else {
            return client1.getFriends().contains(client2) ? 1 : 0;
        }
    }

    public Optional<Client> findById(Long id) {
        return clients.stream().filter(c -> c.getId() == id).findFirst();
    }

    public List<Client> findAllByOrderByIdDesc() {
        return clients.stream().sorted(Comparator.comparingLong(Client::getId).reversed()).collect(Collectors.toList());
    }

    public void deleteAll() {
        clients.clear();
    }

    // =================  Autogenerated  =====================

    public List<Client> findAll() {
        return null;
    }

    public List<Client> findAll(Sort sort) {
        return null;
    }

    public Page<Client> findAll(Pageable pageable) {
        return null;
    }

    public List<Client> findAllById(Iterable<Long> iterable) {
        return null;
    }

    public long count() {
        return 0;
    }

    public void deleteById(Long aLong) {

    }

    public void delete(Client client) {

    }

    public void deleteAll(Iterable<? extends Client> iterable) {

    }

    public <S extends Client> List<S> saveAll(Iterable<S> iterable) {
        return null;
    }

    public boolean existsById(Long aLong) {
        return false;
    }

    public void flush() {

    }

    public <S extends Client> S saveAndFlush(S s) {
        return null;
    }

    public void deleteInBatch(Iterable<Client> iterable) {

    }

    public void deleteAllInBatch() {

    }

    public Client getOne(Long aLong) {
        return null;
    }

    public <S extends Client> Optional<S> findOne(Example<S> example) {
        return Optional.empty();
    }

    public <S extends Client> List<S> findAll(Example<S> example) {
        return null;
    }

    public <S extends Client> List<S> findAll(Example<S> example, Sort sort) {
        return null;
    }

    public <S extends Client> Page<S> findAll(Example<S> example, Pageable pageable) {
        return null;
    }

    public <S extends Client> long count(Example<S> example) {
        return 0;
    }

    public <S extends Client> boolean exists(Example<S> example) {
        return false;
    }
}
